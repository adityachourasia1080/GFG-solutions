bool isoperator(char c)
{
    if (c=='+' || c=='-'  || c=='*'  || c=='/' || c=='^')  return true;
    return false;
}
et* constructTree(char postfix[])
{
    
    stack<et*> st;
int n = strlen(postfix); 
for (int i=0;i<n;i++)
{
 
 et * dup =(struct et *)malloc(sizeof(struct et));
         dup->value=postfix[i];
         
         dup->left=NULL;
         dup->right=NULL;   
    if (isoperator(postfix[i]))
    {
        et * temp= st.top(); st.pop();
        et * temp2= st.top();  st.pop();
        dup->left= temp2;
        dup->right= temp;
        st.push(dup);
    }
    else
    {
         st.push(dup);
    }
    
}
return st.top();

}
