class Solution{
  public:
    int palindromeSubStrs(string s) {
        // code here
        int n= s.length();
        bool dp[n][n];
        unordered_set<string> st;
        for (int i=0;i<n;i++)
        {
            dp[i][i]=true;
            st.insert(s.substr(i,1));
        }
        
        for (int i=0;i<n-1;i++)
        {
            if (s[i]==s[i+1])
            {
                dp[i][i+1]=true;
                st.insert(s.substr(i,2));
            }
            else  dp[i][i+1]=false;
        }
        
        for (int gap=2;gap<n;gap++)
        {
            for (int i=0;i<n-gap;i++)
            {
                int j=i+gap;
                if (dp[i+1][j-1] && s[i]==s[j])
                {
                    dp[i][j]=true;
                    st.insert(s.substr(i,gap+1));
                }
                else  dp[i][j]=false;
            }
        }
        return st.size();
    }
};
