class Solution{
    public:
    int dp[101][101][101];
    int hat(int l,int h,int keys[],int freq[],int height)
    {
        if (l>h)   return 0;
        if (l==h)  return freq[l]* height;
        if (dp[height][l][h]!=-1)  return dp[height][l][h];
        int value=INT32_MAX;
      for (int i=l;i<=h;i++)
      {
          value=min(value,hat(l,i-1,keys,freq,height+1)+hat( i+1,h,keys,freq,height+1)+ freq[i]*height);
      }
      return  dp[height][l][h]= value;
    }
    int optimalSearchTree(int keys[], int freq[], int n)
    {
        // code here
        for (int i=0;i<101;i++)
        {
            for (int j=0;j<101;j++)
            {
                for (int k=0;k<101;k++)  dp[i][j][k]=-1;
            }
        }
        int  l= 0,h=n-1;
        int cost=INT32_MAX;
        
        return hat(l,h,keys,freq,1);
        
    }
};
